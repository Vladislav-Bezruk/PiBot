'''
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.
–¢—É—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—É—â–µ—Ç–≤–ª—è—é—Ç –≤–≤–æ–¥-–≤—ã–≤–æ–¥ –≤ –¢–µ–ª–µ–≥—Ä–∞–º.
–û—Å—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ –º–æ–¥—É–ª—è–º.
'''

from random import randrange

import users
import accesses

import keyboard

import sys

import notifications

import datetime

from schedule import * 

import schedule_func

import subprocess

from main import bot, dp, client

from aiogram.types import *

from config import *

import time

import wolframalpha

import chats

import logs

#import json_func

from collections import Counter

async def registerMessage(message: Message):
    await message.answer(text=f"üÜï{message.from_user.first_name}, –í–∏ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, ‚úçÔ∏è –Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start")

async def noAccessMessage(message: Message):
    await message.answer(text=f"‚õîÔ∏è{message.from_user.first_name}, –í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏")

async def invalidGroupMessage(message: Message):
    await message.answer(text=f"‚ÅâÔ∏è{message.from_user.first_name}, —É –í–∞—Å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–∞, ‚úçÔ∏è –Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /setgroup (–≤–∞—à–∞ –≥—Ä—É–ø–∞)")

#–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞
async def send_to_admin(dp):
    logs.writeLog('Bot started')

    await bot.send_message(chat_id=admin_id, text="Bot started!")

async def mDebug(message: Message):
    log_text = f"message = {message.text} username = @{message.from_user.username} name = {message.from_user.first_name} chat_id = {message.chat.id} user_id = {message.from_user.id}"

    logs.writeLog(log_text)

    await bot.send_message(chat_id=admin_id, text=f"Debug[{message.date}]:\n \tmessage = {message.text}\n \tusername = @{message.from_user.username}\n \tname = {message.from_user.first_name}")

@dp.message_handler(commands=['start'])
async def echo(message: Message):
    await bot.send_message(chat_id=message.chat.id, text="–ö–Ω–æ–ø–∫–∏:", reply_markup=keyboard.keyboard)

    if users.checkUser(message.from_user.id) == False:
        users.addUser('user', message.from_user.id, 'None')

    await message.answer(text=f"üëãHello, {message.from_user.first_name}.\n‚úçÔ∏èSend me [/help] to find out all the commands")

@dp.message_handler(commands=['help'])
async def echohelp(message: Message):
    
    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/help') == False:
        await noAccessMessage(message)
        return 0
 
    await message.answer(text=f"üìú–ü–µ—Ä–µ–ª—ñ–∫ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö –∫–æ–º–∞–Ω–¥:\n" +
        "‚ú≥Ô∏è/now - –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—É\n" +
        "‚ú≥Ô∏è/today - –ø–∞—Ä–∏ —Å—å–æ–≥–æ–¥–Ω—ñ\n" +
        "‚ú≥Ô∏è/tomorrow - –ø–∞—Ä–∏ –∑–∞–≤—Ç—Ä–∞\n" +
        "‚ú≥Ô∏è/date - —Ä–æ–∑–∫–ª–∞–¥ –ø–æ –¥–∞—Ç—ñ (–ü—Ä–∏–∫–ª–∞–¥: /date 08.03.2021)\n" +
        "‚ú≥Ô∏è/week - —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n" +
        "‚ú≥Ô∏è/setgroup [group] - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥—Ä—É–ø—É (–ü—Ä–∏–∫–ª–∞–¥: /setgroup 1)\n" +
        " ‚úÖ /setgroup 1 - –¥–ª—è –≥—Ä—É–ø–∏ –Ü–ù-01/1\n" +
        " ‚úÖ /setgroup 2 - –¥–ª—è –≥—Ä—É–ø–∏ –Ü–ù-01/2\n" +
        "‚ú≥Ô∏è/calc [question] - wolframalpha (–ü—Ä–∏–∫–ª–∞–¥: /calc x^2 = 4)")

@dp.message_handler(commands=['calc'])
async def echohelp(message: Message):
    
    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/calc') == False:
        await noAccessMessage(message)
        return 0
  
    query = message.text.replace("/calc ", "")
    res = client.query(query)
    output = next(res.results).text

    await message.answer(text=output)

@dp.message_handler(commands=['getjson'])
async def echohelp(message: Message):
    
    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/getjson') == False:
        await noAccessMessage(message)
        return 0

    for schedule in scheduleFilePath:
        logs.writeLog('Sended jsons')

        await bot.send_document(chat_id=message.chat.id, document=open(scheduleFilePath[schedule], 'rb'))

@dp.message_handler(commands=['update'])
async def echohelp(message: Message):
    
    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/update') == False:
        await noAccessMessage(message)
        return 0
   
    subprocess.call([f'./{sUpdate}'])

    logs.writeLog('Schedules updated')

    schedule_func.load()

    await message.answer(text="Schedules updated")
   
@dp.message_handler(commands=['getSource'])
async def echohelp(message: Message):
    
    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/getSource') == False:
        await noAccessMessage(message)
        return 0

    logs.writeLog('Sended source')

    subprocess.call([f'./{createSource}'])
    await bot.send_document(chat_id=message.chat.id, document=open('../../PiBot.zip', 'rb'))
    subprocess.call([f'./{removeSource}'])

def compare(a, b, size):
    for i in range(size):
        if a[i] != b[i]:
            return False

    return True

@dp.message_handler(commands=['shutdown'])
async def echohelp(message: Message):

    time = datetime.now()
    
    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/shutdown') == False:
        await noAccessMessage(message)
        return 0

    if compare(str(time), str(message.date), 18):
        await message.answer(text="Goodbye ...")
 
        accesses.save(accesses.accessesFilePath)
        users.save(users.usersFilePath)

        logs.writeLog('Shutdown ...')

        sys.exit(0)
        return

@dp.message_handler(commands=['getAccess'])
async def echohelp(message: Message):

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/getAccess') == False:
        await noAccessMessage(message)
        return 0

    access = users.getAccess(message.from_user.id)
    await message.answer(text=f"Your access level - {access}")

@dp.message_handler(commands=['getCommands'])
async def echohelp(message: Message):

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/getCommands') == False:
        await noAccessMessage(message)
        return 0

    commands = accesses.getCommands(users.getAccess(message.from_user.id))

    await message.answer(text=commands)

@dp.message_handler(commands=['getCommandsAccess'])
async def echohelp(message: Message):

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/getCommandsAccess') == False:
        await noAccessMessage(message)
        return 0

    commands = accesses.getCommands(message.text.replace("/getCommandsAccess ", ""))

    await message.answer(text=commands)

@dp.message_handler(commands=['save'])
async def echohelp(message: Message):
    
    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/save') == False:
        await noAccessMessage(message)
        return 0

    logs.writeLog('Saving data ...')

    accesses.save(accesses.accessesFilePath)
    users.save(users.usersFilePath)
    
    await message.answer(text="All saved!")

@dp.message_handler(commands=['setgroup'])
async def echohelp(message: Message):
    
    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/setgroup') == False:
        await noAccessMessage(message)
        return 0
        
    group = message.text.replace("/setgroup ", "")

    if (group != '1' and group != '2'):
        await message.answer(text=f"‚ÅâÔ∏è{message.from_user.first_name}, –Ω–æ–º–µ—Ä –≥—Ä—É–ø–∏ –º–∞—î –±—É—Ç–∏ 1 –∞–±–æ 2")
        return 0

    users.set(users.getAccess(message.from_user.id), message.from_user.id, 'group', str(group))

    await message.answer(text=f"‚ÄºÔ∏è–ó–∞—Ä–∞–∑ –í–∞—à–∞ –≥—Ä—É–ø–∞ - –Ü–ù-01/{group}")

@dp.message_handler(commands=['getid'])
async def echohelp(message: Message):
    
    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/getid') == False:
        await noAccessMessage(message)
        return 0
        
    await message.answer(text=f"Your id - {str(message.from_user.id)}")
    
@dp.message_handler(commands=['addGroup'])
async def echohelp(message: Message):

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/addGroup') == False:
        await noAccessMessage(message)
        return 0

    group = message.text.replace("/addGroup ", "")

    if chats.checkGroup(message.chat.id, group) == False:
        chats.addGroup(message.chat.id, group)
        await message.answer(text=f"–ì—Ä—É–ø–∞ {group} –¥–æ–¥–∞–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ")
    else:
        await message.answer(text=f"–ì—Ä—É–ø–∞ {group} –≤–∂–µ –±—É–ª–∞ –¥–æ–¥–∞–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ")

@dp.message_handler(commands=['removeGroup'])
async def echohelp(message: Message):

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/removeGroup') == False:
        await noAccessMessage(message)
        return 0

    group = message.text.replace("/removeGroup ", "")

    if chats.checkGroup(message.chat.id, group) == True:
        chats.removeGroup(message.chat.id, group)
        await message.answer(text=f"–ì—Ä—É–ø–∞ {group} –≤–∏–¥–∞–ª–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ")
    else:
        await message.answer(text=f"–ì—Ä—É–ø–∞ {group} –≤–∂–µ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ")

@dp.message_handler(commands=['now'])
async def echohelp(message: Message):
    
    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/now') == False:
        await noAccessMessage(message)
        return 0
    
    group = users.get(users.getAccess(message.from_user.id), message.from_user.id, 'group')

    if group == 'None':
        await invalidGroupMessage(message)
        return 0

    result = help_get_url(str(group))
    
    await message.answer(result)

@dp.message_handler(commands=['today'])
async def echohelp(message: Message):
    
    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/today') == False:
        await noAccessMessage(message)
        return 0
    
    group = users.get(users.getAccess(message.from_user.id), message.from_user.id, 'group')

    if group == 'None':
        await invalidGroupMessage(message)
        return 0

    result = help_today(str(group))
    await message.answer(text=result)

@dp.message_handler(commands=['date'])
async def echohelp(message: Message):

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/date') == False:
        await noAccessMessage(message)
        return 0

    group = users.get(users.getAccess(message.from_user.id), message.from_user.id, 'group')

    if group == 'None':
        await invalidGroupMessage(message)
        return 0

    result = help_date(str(group), message.text.replace("/date ", ""))
    await message.answer(text=result)

@dp.message_handler(commands=['tomorrow'])
async def echohelp(message: Message):

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/tomorrow') == False:
        await noAccessMessage(message)
        return 0
    
    group = users.get(users.getAccess(message.from_user.id), message.from_user.id, 'group')

    if group == 'None':
        await invalidGroupMessage(message)
        return 0

    result = help_tomorrow(str(group))
    await message.answer(text=result)

@dp.message_handler(commands=['week'])
async def echohelp(message: Message):

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0
        
    if users.checkCommand(message.from_user.id, '/week') == False:
        await noAccessMessage(message)
        return 0

    group = users.get(users.getAccess(message.from_user.id), message.from_user.id, 'group')

    if group == 'None':
        await invalidGroupMessage(message)
        return 0

    result = help_week(str(group))
    await message.answer(text=result)

@dp.message_handler(content_types = ContentType.TEXT)
async def echoMessage(message: Message):
    await mDebug(message)

    if chats.checkChat(message.chat.id) == False:
        chats.addChat(message.chat.id)

        await bot.send_message(chat_id=message.chat.id, text="–ö–Ω–æ–ø–∫–∏:", reply_markup = keyboard.keyboard)